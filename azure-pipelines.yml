trigger:
  branches:
    include:
      - master
      - dev

variables:
  - group: azure-credentials

stages:
- stage: Build
  displayName: Build and analyze
  jobs:
  - job: BuildAndTest
    displayName: Build and Test
    pool:
      name: 'Default'
    
    steps:
    - script: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    
    - script: |
        source venv/bin/activate
        export PYTHONPATH=$(pwd)/src:$PYTHONPATH
        pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=src --cov-report=xml --cov-report=html
      displayName: 'Run tests'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'devops-ta-sonarcloud-connection'
        organization: 'dmsstaging01'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'dmsstaging01_dmsstaging01'
        cliProjectName: 'dmsstaging01'
        cliSources: '.'
        extraProperties: |
          sonar.python.coverage.reportPaths=coverage.xml
          sonar.python.xunit.reportPath=junit/test-results.xml
    
    - task: SonarCloudAnalyze@1
    
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    # Build and push usando buildx
    - script: |
        # Configurar buildx
        docker buildx create --name mybuilder --driver docker-container --bootstrap
        docker buildx use mybuilder
        
        # Login to ACR usando las variables de Azure
        echo $(ACR_ADMIN_PASSWORD) | docker login $(ACR_LOGIN_SERVER) -u $(ACR_ADMIN_USERNAME) --password-stdin
        
        # Build y push de la imagen multi-arquitectura
        docker buildx build --platform linux/amd64,linux/arm64 \
          --builder mybuilder \
          -t $(ACR_LOGIN_SERVER)/$(IMAGE_REPOSITORY_NAME):$(Build.BuildId) \
          -t $(ACR_LOGIN_SERVER)/$(IMAGE_REPOSITORY_NAME):latest \
          --push \
          .
        
        # Limpiar
        docker buildx rm mybuilder
        docker logout $(ACR_LOGIN_SERVER)
      displayName: 'Build and push multi-arch Docker image'

- stage: DeployToDev
  displayName: Deploy to Dev
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: DeployToAKSDev
    displayName: Deploy to AKS Dev
    environment: development
    pool:
      name: 'Default'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: Kubernetes@1
            displayName: Delete existing secret
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              command: 'delete'
              arguments: 'secret $(IMAGE_PULL_SECRET_NAME) --ignore-not-found'
              kubernetesServiceEndpoint: 'devops-ta-aks-connection'

          - task: Kubernetes@1
            displayName: Create new secret
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              command: 'create'
              arguments: 'secret docker-registry $(IMAGE_PULL_SECRET_NAME) --docker-server=$(ACR_LOGIN_SERVER) --docker-username=$(ACR_ADMIN_USERNAME) --docker-password=$(ACR_ADMIN_PASSWORD)'
              kubernetesServiceEndpoint: 'devops-ta-aks-connection'

          - task: Kubernetes@1
            displayName: Deploy to AKS
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.DefaultWorkingDirectory)/manifests'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              kubernetesServiceEndpoint: 'devops-ta-aks-connection'

          - task: Bash@3
            displayName: 'Debug Kubernetes Deployment'
            inputs:
              targetType: 'inline'
              script: |
                kubectl get pods -n default
                kubectl get services -n default
                kubectl get deployments -n default
                kubectl describe deployment microservice-deployment -n default
                kubectl get events --sort-by='.metadata.creationTimestamp' -n default
                
          - task: HelmDeploy@0
            displayName: 'Install NGINX Ingress Controller'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'repo'
              arguments: 'add ingress-nginx https://kubernetes.github.io/ingress-nginx'

          - task: HelmDeploy@0
            displayName: 'Update Helm repos'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'repo'
              arguments: 'update'

          - task: HelmDeploy@0
            displayName: 'Deploy NGINX Ingress Controller'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'ingress-nginx/ingress-nginx'
              releaseName: 'nginx-ingress'
              installIfNotExist: true

          - task: HelmDeploy@0
            displayName: 'Install cert-manager'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'cert-manager'
              command: 'repo'
              arguments: 'add jetstack https://charts.jetstack.io'

          - task: HelmDeploy@0
            displayName: 'Deploy cert-manager'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'cert-manager'
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'jetstack/cert-manager'
              releaseName: 'cert-manager'
              installIfNotExist: true
              arguments: '--create-namespace --set installCRDs=true'

          - task: Kubernetes@1
            displayName: 'Apply Cert Issuer'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.DefaultWorkingDirectory)/manifests/cert-issuer.yml'

- stage: DeployToProd
  displayName: Deploy to Prod
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployToAKSProd
    displayName: Deploy to AKS Prod
    environment: production
    pool:
      name: 'Default'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: Kubernetes@1
            displayName: Delete existing secret
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              command: 'delete'
              arguments: 'secret $(IMAGE_PULL_SECRET_NAME) --ignore-not-found'
              kubernetesServiceEndpoint: 'devops-ta-aks-connection'

          - task: Kubernetes@1
            displayName: Create new secret
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              command: 'create'
              arguments: 'secret docker-registry $(IMAGE_PULL_SECRET_NAME) --docker-server=$(ACR_LOGIN_SERVER) --docker-username=$(ACR_ADMIN_USERNAME) --docker-password=$(ACR_ADMIN_PASSWORD)'
              kubernetesServiceEndpoint: 'devops-ta-aks-connection'

          - task: Kubernetes@1
            displayName: Deploy to AKS
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.DefaultWorkingDirectory)/manifests'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              kubernetesServiceEndpoint: 'devops-ta-aks-connection'

          - task: Bash@3
            displayName: 'Debug Kubernetes Deployment'
            inputs:
              targetType: 'inline'
              script: |
                kubectl get pods -n default
                kubectl get services -n default
                kubectl get deployments -n default
                kubectl describe deployment microservice-deployment -n default
                kubectl get events --sort-by='.metadata.creationTimestamp' -n default
                
          - task: HelmDeploy@0
            displayName: 'Install NGINX Ingress Controller'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'repo'
              arguments: 'add ingress-nginx https://kubernetes.github.io/ingress-nginx'

          - task: HelmDeploy@0
            displayName: 'Update Helm repos'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'repo'
              arguments: 'update'

          - task: HelmDeploy@0
            displayName: 'Deploy NGINX Ingress Controller'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'ingress-nginx/ingress-nginx'
              releaseName: 'nginx-ingress'
              installIfNotExist: true

          - task: HelmDeploy@0
            displayName: 'Install cert-manager'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'cert-manager'
              command: 'repo'
              arguments: 'add jetstack https://charts.jetstack.io'

          - task: HelmDeploy@0
            displayName: 'Deploy cert-manager'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'cert-manager'
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'jetstack/cert-manager'
              releaseName: 'cert-manager'
              installIfNotExist: true
              arguments: '--create-namespace --set installCRDs=true'

          - task: Kubernetes@1
            displayName: 'Apply Cert Issuer'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'devops-ta-aks-connection'
              namespace: 'default'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.DefaultWorkingDirectory)/manifests/cert-issuer.yml'