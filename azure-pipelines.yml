trigger:
  branches:
    include:
      - master
      - dev

variables:
  - group: azure-credentials

stages:
- stage: Build
  displayName: Build and analyze
  jobs:
  - job: BuildAndTest
    displayName: Build and Test
    pool:
      name: 'Default'
    
    steps:
    - script: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    
    - script: |
        source venv/bin/activate
        export PYTHONPATH=$(pwd)/src:$PYTHONPATH
        pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=src --cov-report=xml --cov-report=html
      displayName: 'Run tests'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'devops-ta-sonarcloud-connection'
        organization: 'dmsstaging01'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'dmsstaging01_dmsstaging01'
        cliProjectName: 'dmsstaging01'
        cliSources: '.'
        extraProperties: |
          sonar.python.coverage.reportPaths=coverage.xml
          sonar.python.xunit.reportPath=junit/test-results.xml
    
    - task: SonarCloudAnalyze@1
    
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

- stage: DeployToDev
  displayName: Deploy to Dev
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: DeployToAKSDev
    displayName: Deploy to AKS Dev
    environment: development
    pool:
      name: 'Default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(IMAGE_PULL_SECRET_NAME)
              containers: |
                $(ACR_LOGIN_SERVER)/$(IMAGE_REPOSITORY_NAME):$(Build.BuildId)

- stage: DeployToProd
  displayName: Deploy to Prod
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployToAKSProd
    displayName: Deploy to AKS Prod
    environment: production
    pool:
      name: 'Default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(IMAGE_PULL_SECRET_NAME)
              containers: |
                $(ACR_LOGIN_SERVER)/$(IMAGE_REPOSITORY_NAME):$(Build.BuildId)